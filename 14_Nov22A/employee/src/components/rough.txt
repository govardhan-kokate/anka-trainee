//----------------------------------------
{/* <NavLink  style={{textDecoration:"none", color:"white"}} to="/CreateEmployee">CreateEmployee</NavLink>

<NavLink  style={{textDecoration:"none", color:"white"}} to="/EmployeeTable">EmployeeTable</NavLink>
 */}


// import * as React from 'react';
// import { DataGrid } from '@mui/x-data-grid';
// import axios from "axios";
// import {useEffect,useState} from "react";

// const User=()=>{
//     const [data,setData] = useState([]);
//     const [search,setSearch] = useState("");
//     useEffect(()=>{
//         axios.get('http://localhost:3000/registration')
//         .then(res=>{
//             console.log(res)
//             console.log(res.data)
//             setData(res?.data?.data)
//         })
//         .catch(err =>{
//             alert('something went wrong')
//         })
//     },[])

//     const columns = [
//         { field: 'id', headerName: 'ID', width: 70 },
//         { field: 'firstname', headerName: 'First name', width: 130 },
//         { field: 'lastname', headerName: 'Last name', width: 130 },
//         { field: 'dateofbirth', headerName: 'Birth Date', width: 130 }


//       ];
      
//     const rows = [
//         { id: 1, firstname: 'Snow', lastname: 'Cerse', dateofbirth: '02/03/2021' },
//         { id: 2, firstname: 'Jon', lastname: 'Cersei', dateofbirth: '04/04/2022' }
//       ];
      
// return(
//     <div style={{ height: 400, width: '100%' }}>
//     User Table
//     <input type="text" placeholder="search here" onChange={(e)=>{
//         setSearch(e.target.value);
//     }}/>

//    {/* {data.filter(item=>{
//         if(search===""){
//             return item
//         }
//         else if(item.name.toLowerCase().includes(search.toLowerCase())){
//          return item
//         }
//     }).map((d)=>{
//           return(
//             <p>
//                 {d.firstname}
//             </p>
//           );
//         })
//     }  */}

    

//  <DataGrid
//         rows={rows}
//         columns={columns}
//         pageSize={5}
//         rowsPerPageOptions={[5]}
//         checkboxSelection
//       />


//     </div>
// )
// }
// export default User; 


//----------------------------EMPLOYEE TABLE------------------------------------

import * as React from 'react';
import Paper from '@mui/material/Paper';
import Table from '@mui/material/Table';
import TableBody from '@mui/material/TableBody';
import TableCell from '@mui/material/TableCell';
import TableContainer from '@mui/material/TableContainer';
import TableHead from '@mui/material/TableHead';
import TablePagination from '@mui/material/TablePagination';
import TableRow from '@mui/material/TableRow';

import {Button,Dialog,DialogTitle,DialogContent,DialogContentText,DialogActions} from '@mui/material';

import axios from 'axios';
import { useState,useEffect } from 'react';
import {Modal} from '@mui/material';
 import EditEmployee from './AddEmployee';
import UpdateEmployee from './UpdateEmployee';

const Users=(props)=>{

    const columns = [{ id: '1', label: 'ID', minWidth: 50 },
        { id: '2', label: 'FIRST NAME', minWidth: 100 },
        { id: '3', label: 'LAST NAME', minWidth: 100 },
        {
          id: '4',label: 'BIRTH DATE', minWidth: 100, format: (value) => value.toLocaleString('en-US'),
        },
        { id: '5', label: 'GENDER', minWidth:100 },
        { id: '6', label: 'SELECT ROLE', minWidth: 100 },  
        { id: '7', label: 'SKILL', minWidth:100},
        { id: '8', label: 'ABOUT EMPLOYEE', minWidth: 100 },
        { id: '8', label: 'ACTION', minWidth: 100 },
      ];
      
    //   function createData(firstname, lastname, dateofbirth) {
    //     return { firstname, lastname, dateofbirth};
    //   }
      

    const [page, setPage] = React.useState(0);
  const [rowsPerPage, setRowsPerPage] = React.useState(5);
  const [user,setUser] = useState([]);
  const [isAdd,setIsAdd]=useState(false);

  const [edit,setEdit]=useState([]);


  const [open, setOpen] = useState(false);
  const [openalert, setOpenAlert] = useState(false);


  const handleChangePage = (event,newPage) => {
    setPage(newPage);
  };

  const handleChangeRowsPerPage = (event) => {
    setRowsPerPage(parseInt(event.target.value,10));
    setPage(0);
  };

      useEffect(()=>{
        axios.get('http://localhost:3000/registration')
        .then(res=>{
            console.log(res.data)
            setUser(res?.data)
        })
        .catch(err =>{
            alert('something went wrong')
        })
    },[])




    const userDelete=(id,e)=>{
    // e.preventDefault();
    axios.delete(`http://localhost:3000/registration/${id}`).then(res=>{console.log("Deleted!!!",res)
  
    this.props.history.push("/Employee");}).catch(err=>console.log(err))
    setOpenAlert(true);
    }

    // const userEdit=(id,e)=>{
    //   // e.preventDefault();
    //   axios.push(`http://localhost:3000/registration/${id}`).then(res=>{console.log("Edited!!!",res)
    //   this.props.history.push("/Employee");}).catch(err=>console.log(err))
    //   }
  
    const addUser=()=>{
      setIsAdd(true); 
    }

    const userOpen=(user)=>{
    setEdit(user);
    setOpen(true);
    }
    
    const userClose=()=>{
    setOpen(false);
    }

    const alertOpen=()=>{
    //  setOpen(user)
     setOpenAlert(true);
    }

    const alertClose=()=>{
      setOpenAlert(false);
    }

    const AlertDialog=()=>{
     return(
          <div>
      <Button variant="outlined" onClick={alertOpen}>
        Open alert dialog
      </Button>
        <Dialog
        open={openalert}
        onClose={alertClose}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
          console.log("Alert");
        <DialogTitle id="alert-dialog-title">
        Delete the record?
        </DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
         Are you sure you want to delete the record ? You will not be able to edit after deleting.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={alertClose}>Cancel</Button>
          <Button onClick={alertClose} autoFocus>
          ok
          </Button>
        </DialogActions>
        console.log("AlertDialog");
      </Dialog>
  
      </div>
     )
    };



    //----------to auto update data----------
    const FetchData=()=>{
      
        axios.get(`http://localhost:3000/registration`)
        .then(res=>{
           console.log(res.data)
           setUser(res?.data)
        })

    };
    //-----------to delete data/ auto refresh----------------
  //   const DeleteData=(id)=>{
      
  //     axios.delete(`http://localhost:3000/registration/${id}`)
  //     .then(res=>{
  //        console.log(res.data);
  //        setUser(res?.data)
  //     })
  // };

return (
    <div>

       <Modal
        open={open}
        onClose={userClose}
    
        aria-labelledby="modal-modal-title"
        aria-describedby="modal-modal-description"
      >
        <UpdateEmployee
           onClose={userClose}
          employeeData={edit}
          fetchAPI={FetchData}
        >
          </UpdateEmployee>

      </Modal>
    

<Paper sx={{ width: '100%' }}>
      {/* <TableRow>
        <Button onClick={addUser}>{<EditEmployee/>}</Button>
      </TableRow>  */}
      <TableContainer sx={{ maxHeight: 440 }}>
        <Table stickyHeader aria-label="sticky table">

          <TableHead>
          <TableRow>
     
              {columns.map((column) => (
                <TableCell
                  key={column.id}
                  align={column.align}
                  style={{ minWidth: column.minWidth }}
                >
                  {column.label}
                </TableCell>
              ))}
            </TableRow>
           
          </TableHead>
        
          <TableBody>
        
            {user
              .slice( page * rowsPerPage, page * rowsPerPage + rowsPerPage)
              .map((user,index) =>  (  
                 <TableRow key={user.id}>  
                  <TableCell align="left">{index + 1}</TableCell>  
                  <TableCell align="left">{user.firstname}</TableCell>
                  <TableCell align="left">{user.lastname}</TableCell>
                  <TableCell align="left">{user.dateofbirth}</TableCell>
                  <TableCell align="left">{user.gender}</TableCell>
                  <TableCell align="left">{user.selectstream}</TableCell>
                  <TableCell align="left">{user.skill}</TableCell>
                  <TableCell align="left">{user.bio}</TableCell>
                  <TableCell align="left" direction="row" ><Button variant="outlined" onClick={(e)=> userDelete(user.id)}  className="space">Delete</Button>
                  
                   {/* <Button onClick={(e)=>userEdit}>{<EditEmployee/>}</Button></TableCell> */}
                  <Button  variant="contained" onClick={()=>userOpen(user)}>Update</Button>
                  </TableCell>
                  </TableRow>
                )
              )}    
          </TableBody>
        </Table>
      </TableContainer>
      <TablePagination
        rowsPerPageOptions={[5, 25, 100]}
        component="div"
        count={user.length}
        rowsPerPage={rowsPerPage}
        page={page}
        onPageChange={handleChangePage}
        onRowsPerPageChange={handleChangeRowsPerPage}
      />    
    </Paper>
  
    </div>
);
}
export default Users;